name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build, Test, and Run CLI Commands
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20' # Specify the Go version you want to use

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Install dependencies
      - name: Install dependencies
        run: go mod download

      # Run tests
      - name: Run tests
        run: go test -v ./...

      # Build the application
      - name: Build application
        run: go build -o app ./...

      # Test the `list` command
      - name: Test `list` command
        run: |
          ./app list | tee list_output.txt
          # Example assertion (customize as needed)
          if grep -q "expected initial output" list_output.txt; then
            echo "List command works as expected."
          else
            echo "List command output is not as expected."
            exit 1
          fi

      # Test the `list -a` command
      - name: Test `list -a` command
        run: |
          ./app list -a | tee list_a_output.txt
          # Example assertion (customize as needed)
          if grep -q "expected output for list -a" list_a_output.txt; then
            echo "List -a command works as expected."
          else
            echo "List -a command output is not as expected."
            exit 1
          fi

      # Test the `add "new task"` command
      - name: Test `add "new task"` command
        run: |
          ./app add "new task"
          ./app list | tee list_after_add_output.txt
          # Example assertion (customize as needed)
          if grep -q "new task" list_after_add_output.txt; then
            echo "Add command works as expected."
          else
            echo "Add command did not add the task correctly."
            exit 1
          fi

      # Test the `complete 1` command
      - name: Test `complete 1` command
        run: |
          ./app complete 1
          ./app list | tee list_after_complete_output.txt
          # Example assertion (customize as needed)
          if grep -q "1 true" list_after_complete_output.txt; then
            echo "Complete command works as expected."
          else
            echo "Complete command did not update the task status correctly."
            exit 1
          fi